<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates>
  <template autoinsert="true" context="java-members" deleted="false" description="junit after method" enabled="true" name="after">${:import (org.junit.After)}&#13;
@After&#13;
public void tearDown() {&#13;
    ${cursor}&#13;
}</template>
  <template autoinsert="true" context="java-members" deleted="false" description="junit afterclass method" enabled="true" name="afterclass">${:import (org.junit.AfterClass)}&#13;
@AfterClass&#13;
public static void oneTimeTearDown() {&#13;
    // one-time cleanup code&#13;
    ${cursor}&#13;
}</template>
  <template autoinsert="true" context="java-members" deleted="false" description="junit before method" enabled="true" name="before">${:import (org.junit.Before)}&#13;
@Before&#13;
public void setUp() {&#13;
	${cursor}&#13;
}</template>
  <template autoinsert="true" context="java-members" deleted="false" description="junit beforeclass method" enabled="true" name="beforeclass">${:import (org.junit.BeforeClass)}&#13;
@BeforeClass&#13;
public static void oneTimeSetUp() {&#13;
    // one-time initialization code&#13;
    ${cursor}&#13;
}</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="iterate over map" enabled="true" name="for">${:import(java.util.Map.Entry)}&#13;
for(Entry&lt;${key:argType(map,0)},${value:argType(map,1)}&gt; entry :&#13;
                    ${map:var(java.util.Map)}.entrySet()) {&#13;
    ${key} key = entry.getKey();&#13;
    ${value} value = entry.getValue();&#13;
    ${cursor}&#13;
}</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="if not null" enabled="true" name="if">if (${var} != null){&#13;
    ${cursor}&#13;
}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="if null" enabled="true" name="if">if (${var} == null){&#13;
	${cursor}&#13;
}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="logger debug" enabled="true" name="logd">if(LOGGER.isDebugEnabled())&#13;
     LOGGER.debug(${word_selection}${});&#13;
${cursor}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="logger error" enabled="true" name="logerr">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
${cursor}&#13;
</template>
  <template autoinsert="true" context="java-members" deleted="false" description="create new logger" enabled="true" name="logger">${:import(org.slf4j.Logger,&#13;
          org.slf4j.LoggerFactory)}&#13;
private static final Logger LOGGER =&#13;
       LoggerFactory.getLogger(${enclosing_type}.class);&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="logger info" enabled="true" name="logi">LOGGER.info(${word_selection}${});&#13;
${cursor}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="log error and throw exception" enabled="true" name="logthrow">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
throw ${exception_variable_name};&#13;
${cursor}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="iterate over lines in file" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedReader)}&#13;
try (BufferedReader in = Files.newBufferedReader(Paths.get(${fileName:var(String)}),&#13;
                                                 Charset.forName("UTF-8"))) {&#13;
	String line = null;&#13;
	while ((line = in.readLine()) != null) {&#13;
		${cursor}&#13;
	}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="read all lines from file as a list" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.util.List,&#13;
          java.util.ArrayList)}&#13;
List&lt;String&gt; lines = new ArrayList&lt;&gt;();&#13;
try{&#13;
	lines = Files.readAllLines(Paths.get(${fileName:var(String)}),&#13;
                                        Charset.forName("UTF-8"));&#13;
}catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
${cursor}</template>
  <template autoinsert="false" context="java-members" deleted="false" description="static final field" enabled="true" id="org.eclipse.jdt.ui.templates.static_final" name="static_final">${visibility:link(public,protected,private)} static final ${type} ${NAME} = ${word_selection}${};</template>
  <template autoinsert="true" context="java" deleted="false" description="format string" enabled="true" name="strf">String.format("${word_selection}${}",${var}${cursor})</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="print formatted string to standard out" enabled="true" name="sysf">System.out.printf("${word_selection}${}",${var}${cursor});&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="write text to a file" enabled="true" name="writefile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedWriter)}&#13;
try (BufferedWriter out = Files.newBufferedWriter(Paths.get(${fileName:var(String)}),&#13;
                                                  Charset.forName("UTF-8"))) {&#13;
    out.write(${string:var(String)});&#13;
    out.newLine();&#13;
    ${cursor}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="parse xml file as Document" enabled="true" name="xml">${:import(org.w3c.dom.Document,&#13;
          javax.xml.parsers.DocumentBuilderFactory,&#13;
          java.io.File,&#13;
          java.io.IOException,&#13;
          javax.xml.parsers.ParserConfigurationException,&#13;
          org.xml.sax.SAXException)}&#13;
Document doc = null;&#13;
try {&#13;
	doc = DocumentBuilderFactory.newInstance()&#13;
			.newDocumentBuilder()&#13;
			.parse(new File(${filename:var(String)}));&#13;
} catch (SAXException | IOException | ParserConfigurationException e) {&#13;
	// ${todo}: handle exception&#13;
}&#13;
${cursor}</template>
  <template autoinsert="true" context="java-statements" deleted="false" description="parse xml string as Document" enabled="true" name="xml">${:import(org.w3c.dom.Document,&#13;
          javax.xml.parsers.DocumentBuilderFactory,&#13;
          org.xml.sax.InputSource,&#13;
          java.io.StringReader,&#13;
          java.io.IOException,&#13;
          javax.xml.parsers.ParserConfigurationException,&#13;
          org.xml.sax.SAXException)}&#13;
Document doc = null;&#13;
try {&#13;
	doc = DocumentBuilderFactory.newInstance()&#13;
			.newDocumentBuilder()&#13;
			.parse(new InputSource(new StringReader(${str:var(String)})));&#13;
} catch (SAXException | IOException | ParserConfigurationException e) {&#13;
	// ${todo}: handle exception&#13;
}&#13;
${cursor}</template>
</templates>
