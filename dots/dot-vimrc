" install pathogen
"   https://github.com/tpope/vim-pathogen
" pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

set exrc
set secure
set modeline
set wildmenu
set showcmd
set number
set hlsearch
set hidden
set ruler
" set autochdir
set nojoinspaces
set laststatus=2

set exrc
set secure

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set nocompatible
set autoindent
set smartindent
" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set textwidth=120
" turn syntax highlighting on
set t_Co=256
syntax on
"#set number
set showmatch
set comments=sl:/*,mb:\ *,elx:\ */

let g:mapleader = "-"

" $VIMRUNTIME/filetype.vim recognizes only README.md as markdown file.
" All other *.md files are recognized as modula2 files. Recognize *.md
" files as markdown files instead.
autocmd BufNewFile,BufRead *.md,*.txt set filetype=markdown
autocmd BufNewFile,BufRead *.go,Makefile setlocal tabstop=4 noexpandtab

" While coding vertical split windows in terminals, sometimes a single
" line of code wraps into multiple lines in vertical split window. If the
" code is written to not exceed 72, 80 or 120 characters per line, then
" one of the following commands would resize the vertical split window
" to sufficient number of columns to read such code.
"command Wide vertical resize 78
"command Wider vertical resize 86
"command Widest vertical resize 126

" Highlight TODO in any file.
autocmd BufWinEnter * syntax keyword Todo TODO

" Highlight trailing whitespace as error.
autocmd BufWinEnter * syntax match Error /\s\+$/

"set colorcolumn=120
highlight ColorColumn ctermbg=darkgray

augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END

let &path.="src/include,/usr/include/AL,"

"set makeprg=make\ -j9
set makeprg=make\ %:r\ CFLAGS="-g\ -O0"\ CPPFLAGS="-g\ -O0"


" keys
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
nnoremap <F7> :make!<cr>
map <S-F7> :make clean all<CR>
"run progrgam
nnoremap <F5> :!./%:r<cr>
" search next result
noremap [q :cprev<CR>
nnoremap ]q :cnext<CR>
nnoremap [Q :cfirst<CR>
nnoremap ]Q :clast<CR>
" open current file in a new vim tab and close
nnoremap t. :tabedit %<cr>
nnoremap tc :tabclose<cr>

let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
if &diff
      " diff settings
    map <M-Down> ]c
    map <M-Up> [c
    map <M-Left> do
    map <M-Right> dp
    map <F9> :new<CR>:read !svn diff<CR>:set syntax=diff buftype=nofile<CR>gg
else
    " spell settings
    ":setlocal spell spelllang=en
    " set the spellfile - folders must exist
    set spellfile=~/.vim/spellfile.add
    map <M-Down> ]s
map <M-Up> [s
endif


" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" for elm"
Plug 'elmcast/elm-vim'
Plug 'fatih/vim-go'
Plug 'AndrewRadev/splitjoin.vim'

" dir diff and merge
Plug 'will133/vim-dirdiff'

"nerdtree - file system browsing
Plug 'scrooloose/nerdtree'

" colorschemes
Plug 'drewtempelmeyer/palenight.vim'
Plug 'altercation/vim-colors-solarized'

" Vim Easy Plugin to format tables in markdown
Plug 'junegunn/vim-easy-align'

" Plugin to live view the markdown files
Plug 'shime/vim-livedown'

" Plugin to browse buffers easily
Plug 'jlanzarotta/bufexplorer'

" Plugin for git workflow
Plug 'tpope/vim-fugitive'

" NERDtree file explorer
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Haskell vim
" Plug 'neovimhaskell/haskell-vim'
Plug 'begriffs/haskell-vim-now'

"Sublime like cntrol p menu
Plug 'kien/ctrlp.vim'

" Dot Graphviz helpers
Plug 'wannesm/wmgraphviz.vim'

" BoxDraw plugin for drawing diagrams
" Plug 'gyim/vim-boxdraw'

" Org mode equ
Plug 'jceb/vim-orgmode'

" Vim prettier for nodejs prettier program for auto formatting code
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue'] }

" Neo4j cypher language
Plug 'neo4j-contrib/cypher-vim-syntax'

" bookmark/annotation tool
Plug 'MattesGroeger/vim-bookmarks'
Plug 'PProvost/vim-ps1'

" reactjs development
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'
Plug 'othree/yajs.vim' " js highlighter

" run async commands
Plug 'skywind3000/asyncrun.vim'

" Typescript
Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'

"kotlin
Plug 'udalov/kotlin-vim'

"snippets
" Plug 'honza/vim-snippets'
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'Shougo/neocomplcache'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

" Initialize plugin system
call plug#end()

" CtrlP customizations
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,dependencies/*




let g:solarized_termcolors=256
set termguicolors
"if has('gui_running')
    set background=light
" else
"     set background=dark
" endif
colorscheme solarized


" Development settings
set tags=./tags;
set cscoperelative

" Go shortcuts
let g:go_auto_sameids = 1
augroup GoLanguage
  au!
  au FileType go :nnoremap <buffer> <silent> <Leader>r :GoRun<CR>
  au FileType go :nnoremap <buffer> <silent> <Leader>d :GoDoc<CR>
  au FileType go :nnoremap <buffer> <silent> <Leader>k :GoDef<CR>
  au FileType go :nnoremap <buffer> <silent> <Leader>t :GoTest<CR>
  au FileType go :nnoremap <buffer> <silent> <Leader>b :GoBuild<CR>
  au FileType go :nnoremap <buffer> <silent> <Leader>i :GoImports<CR>:w<CR>
augroup END
" End Go shortcuts

"Plugin Options
nmap gm :LivedownToggle<CR>


" EasyAlign Plugin Options
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" C/C++ customizations
augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END

" Markdown customizations
au BufRead,BufNewFile *.md setlocal textwidth=80

" CtrlP customizations
let g:ctrlp_custom_ignore = { 'dir': 'build$\|node_modules$\|dependencies$' }


" Snippets
let g:deoplete#enable_at_startup = 1
"  It is assumed you already have deoplete configured
let g:go_snippet_engine = "neosnippet"
let g:neosnippet#snippets_directory='~/.vim/plugged/neosnippet-snippets/neosnippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

"
" " For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif


" reactjs development configurations
" for emmet plugin
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

" run eslint and prettier when saving javascript fies
" the project should have run ```npm install -save-dev prettier eslint-config-prettier eslint-plugin-prettier```
autocmd BufWritePost *.js  AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %
" the project should have run ```npm install -save-dev prettier tslint```
autocmd BufWritePost *.ts  AsyncRun -post=checktime ./node_modules/.bin/tslint --fix %
autocmd BufWritePost *.tsx AsyncRun -post=checktime ./node_modules/.bin/tslint --fix %


